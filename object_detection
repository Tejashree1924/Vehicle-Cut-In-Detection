import cv2
import numpy as np
import tensorflow as tf
import os
import sys

# Add the path to the TensorFlow models research directory
sys.path.append('C:/Users/tejas/Downloads/vehicle_detection/models/research')
sys.path.append('C:/Users/tejas/Downloads/vehicle_detection/models/research/object_detection')

# Import the necessary utilities from the object detection module
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

# Model preparation
MODEL_PATH = 'models/ssd_mobilenet_v1_coco_11_06_2017/frozen_inference_graph.pb'
LABEL_PATH = 'data/mscoco_label_map.pbtxt'
NUM_CLASSES = 90

# Load the frozen TensorFlow model into memory
detection_graph = tf.Graph()
with detection_graph.as_default():
    od_graph_def = tf.compat.v1.GraphDef()
    with tf.io.gfile.GFile(MODEL_PATH, 'rb') as fid:
        serialized_graph = fid.read()
        od_graph_def.ParseFromString(serialized_graph)
        tf.import_graph_def(od_graph_def, name='')

# Load label map
label_map = label_map_util.load_labelmap(LABEL_PATH)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

# Helper function to load image into numpy array
def load_image_into_numpy_array(image):
    (im_width, im_height) = image.size
    return np.array(image.getdata()).reshape((im_height, im_width, 3)).astype(np.uint8)

# Define video path
video_path = 'video/sample_video.mp4'

# Open video file
cap = cv2.VideoCapture(video_path)

with detection_graph.as_default():
    with tf.compat.v1.Session(graph=detection_graph) as sess:
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            
            # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
            image_np_expanded = np.expand_dims(frame, axis=0)
            image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
            boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
            scores = detection_graph.get_tensor_by_name('detection_scores:0')
            classes = detection_graph.get_tensor_by_name('detection_classes:0')
            num_detections = detection_graph.get_tensor_by_name('num_detections:0')
            
            # Actual detection
            (boxes, scores, classes, num_detections) = sess.run(
                [boxes, scores, classes, num_detections],
                feed_dict={image_tensor: image_np_expanded})
            
            # Visualization of the results of a detection
            vis_util.visualize_boxes_and_labels_on_image_array(
                frame,
                np.squeeze(boxes),
                np.squeeze(classes).astype(np.int32),
                np.squeeze(scores),
                category_index,
                use_normalized_coordinates=True,
                line_thickness=8)
            
            for i, b in enumerate(boxes[0]):
                if classes[0][i] in [3, 6, 8] and scores[0][i] >= 0.5:  # Car, Bus, Truck classes
                    mid_x = (boxes[0][i][1] + boxes[0][i][3]) / 2
                    mid_y = (boxes[0][i][0] + boxes[0][i][2]) / 2
                    apx_distance = round(((1 - (boxes[0][i][3] - boxes[0][i][1])) ** 4), 1)
                    cv2.putText(frame, '{}'.format(apx_distance), (int(mid_x * frame.shape[1]), int(mid_y * frame.shape[0])),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                    if apx_distance <= 0.5:
                        if 0.3 < mid_x < 0.7:
                            cv2.putText(frame, 'WARNING!!!', (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 255), 3)
            
            cv2.imshow('Vehicle Detection', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

cap.release()
cv2.destroyAllWindows()
